<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>X86_64 Machine Code on Anima&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/x86_64-machine-code/</link>
    <description>Recent content in X86_64 Machine Code on Anima&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Anima</copyright>
    <lastBuildDate>Wed, 06 Mar 2024 18:47:08 +0100</lastBuildDate><atom:link href="http://localhost:1313/tags/x86_64-machine-code/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/favicon.svg</icon>
    
    
    <item>
      <title>Spine - Compiled stack-based language implemented in C then Rust</title>
      <link>http://localhost:1313/posts/spine/</link>
      <pubDate>Wed, 06 Mar 2024 18:47:08 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/spine/</guid>
      <description><![CDATA[<p>Compiler of a stack-based simple language down to ELF executable with x86_64 machine code generated by handwritten code (no assembly), which works! First started in C, then a rewrite in Rust was started with better abstractions.</p>
<p><a href="https://github.com/anima-libera/spine-lang">GitHub repository of the C version</a>
<a href="https://github.com/anima-libera/spine">GitHub repository of the Rust attempt</a></p>
<h1 id="features">Features</h1>
<ul>
<li>Generates working ELF executables with generated x86_64 machine code.
<ul>
<li>ELF headers generator.</li>
<li>Machine code generator for some x86_64 instructions, no assembly.</li>
<li>Data segment, code segment, labels with offsets corrected during final ELF generation.</li>
</ul>
</li>
<li>Simple stack-based language, <em>C version only</em> for now:
<ul>
<li>One-character instructions with no whitespace separation required, for <a href="https://en.wikipedia.org/wiki/Code_golf">golfing</a> purposes.</li>
<li>Control flow with ifs, loops, callbacks and named functions.</li>
<li>Classic stack manipulations instructions.</li>
<li>Support of two local valriables (only two for declaration with less characters for golfing) which can be &ldquo;runtime-shadowed&rdquo; or not in each function or callback.</li>
<li>Separated the call stack from the data stack (even though x86_64 only have one stack for both).</li>
<li>Pointer dereferecing read and write operations.</li>
<li>Syscall instruction, which provides lots of freedom.</li>
</ul>
</li>
</ul>
<h1 id="gallery">Gallery</h1>
<p>Here is a Spine program (C implementation) that prints <code>argc</code>, all of <code>argv</code> and then all of <code>envp</code> (the environment variables), all of which is on the stack at the start of program execution on Linux. <code>N</code> is a function that prints an integer in base 10, <code>S</code> prints a Spine string (pointer and length, which are what is pushed by Spine string literals), and <code>Z</code> print null-terminated string (or C strings, which are how <code>argv</code> and <code>envp</code> are provided).</p>
<p><img src="/spine-01.png" alt="Image of a Spine program printing argc, argv and envp."></p>
<p>Here are some Spine named functions. <code>N</code> is different from the version above as it uses the local variables (<code>h</code> and <code>v</code>) to have a shorter code. <code>S</code> uses the fact that the write syscall takes the length of a string to do only one syscall. <code>M</code> allocates memory from the OS via the <code>mmap</code> syscall (one of the intended uses of this syscall).</p>
<p><img src="/spine-02.png" alt="Image of some Spine named functions."></p>
<h1 id="why">Why?</h1>
<p>For fun!</p>
<p>This took some learning about the x86_64 architecture, the <a href="https://cdrdv2-public.intel.com/782156/325383-sdm-vol-2abcd.pdf">x86_64 machine code representation of assembly instructions</a> (which is known to be quite complex in some areas), the 64-bit <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF executable format</a> with its many fields and headers, how to work with machine code (not even assembly) and debug such matters.</p>
]]></description>
      
        <media:thumbnail url="http://localhost:1313/spine-02.png" />
      
    </item>
    
    
  </channel>
</rss>
