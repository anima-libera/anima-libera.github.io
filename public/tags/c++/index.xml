<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>C&#43;&#43; on Anima&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Anima&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Anima</copyright>
    <lastBuildDate>Wed, 06 Mar 2024 18:53:08 +0100</lastBuildDate><atom:link href="http://localhost:1313/tags/c++/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/favicon.svg</icon>
    
    
    <item>
      <title>Qwy2 - Previous Minecraft-like attempt in C&#43;&#43; &amp; OpenGL</title>
      <link>http://localhost:1313/posts/qwy2/</link>
      <pubDate>Wed, 06 Mar 2024 18:53:08 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/qwy2/</guid>
      <description><![CDATA[<p>The previous Minecraft-like attempt before <a href="http://localhost:1313/posts/qwy3/">Qwy3</a>.</p>
<p><a href="https://github.com/anima-libera/qwy2">GitHub repository</a></p>
<h1 id="features">Features</h1>
<ul>
<li>Infinite world in all directions including up and down, thanks to cubic chunks.</li>
<li>Chunk meshing with covered face culling and ambiant occlusion trick.</li>
<li>Multiple procedural terrain generators.</li>
<li>Home made noise computation with up to 3 floating point dimensions and 1 integer dimpension.</li>
<li>Blocks can be placed and removed.</li>
<li>Saving/loading to/from named saves on disk. Can save every generated chunks or only the ones that underwent change.</li>
<li>Threadpool for terrain generation (different steps in different tasks), loading from disk, initial meshing (but not remeshing).</li>
<li>Grounds for entities (some throwable spinning crystals as tests are implemented).</li>
<li>Dynamic shadows by shadow mapping (not cascading).</li>
<li>Fog effect (that only works because the sky is one uniform color instead of an arbitrary skybox).</li>
<li>Procedurally generated block textures (less intresting than Qwy3&rsquo;s).</li>
<li>Configurable controls for most controls.</li>
<li>Grounds for a stripting language.</li>
<li>Configurable chunk size at launch time. (Actually useful as this parameter influences the performance of the generation, gameloop and memory usage in complex ways and the best value that optimizes for what a given user prefers on a given machine may be different from one another, and it doesn&rsquo;t cost anything to make this a parameter.)</li>
<li><a href="http://localhost:1313/posts/buildsystem/">Custom build system</a> for better control of the build process, with code generation for ressource embedding.</li>
</ul>
<h1 id="gallery">Gallery</h1>
<p><img src="/qwy2-01.png" alt="Image of some Qwy2 world with the classic generator.">
<img src="/qwy2-02.png" alt="Image of some Qwy2 world with a sky lines biome near a solid biome.">
<img src="/qwy2-03.png" alt="Image of some Qwy2 world with two biomes near some empty sky.">
<img src="/qwy2-04.png" alt="Image of some Qwy2 world with multiple biomes.">
<img src="/qwy2-05.png" alt="Image of some Qwy2 flat-ish world with a handmade small amongus crewmate statue."></p>
<h1 id="why-the-qwy3-rewrite">Why the Qwy3 rewrite?</h1>
<p>Since learning <a href="https://www.rust-lang.org/">Rust</a> (memory safe, no undefined behavior, super clean language features and type system, <a href="https://doc.rust-lang.org/book/ch16-00-concurrency.html">fearless concurrency (!)</a>, standard package manager, etc.) and hearing about <a href="https://wgpu.rs/">Wgpu</a> (<em>safe graphics API</em> implemented in Rust, <a href="https://www.w3.org/TR/WGSL/">WGSL</a> (clean shader language), Vulkan backend to use its validation layers), I thought more and more about the state of Qwy2, stuck with old technologies (C++ and OpenGL, full of undefined behavior, legacy and inelegant features) and how much easier the development would have been if it was made in Rust &amp; Wgpu since the beginning. In addition, I was unhappy with some technical decisions made for Qwy2 (for example the fact that there are multiple generation steps for each chunks, making generation very slow), and a rewrite would allow to benefit from these mistakes to make it better.</p>
<p>So far, I believe that the <a href="http://localhost:1313/posts/qwy3/">Qwy3</a> rewrite in Rust &amp; Wgpu was the best decision regarding this project. Qwy2 shall remain in its unfinished state as the previous iteration of Qwy3. Third time&rsquo;s a charm!</p>]]></description>
      
        <media:thumbnail url="http://localhost:1313/qwy2-00.png" />
      
    </item>
    
    
    
    <item>
      <title>Custom Build System for C/C&#43;&#43; in Python</title>
      <link>http://localhost:1313/posts/buildsystem/</link>
      <pubDate>Wed, 06 Mar 2024 18:50:08 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/buildsystem/</guid>
      <description><![CDATA[<p>Handmade build system for C/C++ executable projects, made in Python.</p>
<h1 id="features">Features</h1>
<ul>
<li>Creating new source files warrant no modification of the build system.</li>
<li>Incremental compilation, keeps artifacts and recompile only the translation units that have changed.</li>
<li>Parses source files for <code>#include</code>s to make an inclusion graph and propagate changes in headers down the graph to flag all concerned translation units for recompilation correctly.</li>
<li>The inclusion graph can be converted to a DOT file.</li>
<li>Allows a special header to contain special custom declarations that trigger code generation to embed text/binary ressources in the binary.</li>
<li>Allows to run the compiled binary after compilation, but only if compilation worked.</li>
<li>Different compilation options produce artifacts that are stored separately so as to reproduce compilation profiles.</li>
<li>Easy to tweak to the needs of the project, that was the whole point of making a custom build system.</li>
</ul>
<h1 id="why-why-not-just-use-cmake-or-make">Why? Why not just use CMake or Make?</h1>
<p>The standard for C and C++ projects is to use CMake, or sometimes just Make. Some benefits are to be gained from such decision, for example some features such as parallel compilation, or the fact that some libraries include a bit of CMake script that is meant to ease its use as a dependency in CMake projects.</p>
<p>In my humble opinion, these benefits do not outweight the inconvenience of how hard it is to understand the obscure ways by which these build systems are indended to be used and configured. If it is quite easy to get them to work on a project by copy-pasting the words of power from StackOverflow into our project, it often remains too mysterious (at least for me) to troubleshoot issues or tweak.</p>
<p>In the end, the build system for a project is just a program that handles the efficient management of the compiling process. I understand that some domain specific language can make the writing and maintenance of such program easier by providing language features related to file and compilation handling. I do not think that being a domain specific language is an excuse to be so uncomfortable and hard to use as the DSLs of CMake and Make. Using a more classic general purpose programming language such as Python is so much nicer, with the small price of having to reimplement some features by hand.</p>
<p>The build system is an important detail of a C/C++ project; a detail, but an important one. I felt more confident in the future of these projects knowing that I fully understood the build system and could tweak/augment/fix it to make it fit to the needs of the project. Using a proper language also allows to augment the build system with features such as code generation, that I believe even a master of CMake script would have a hard time to implement in such an impractical language.</p>
<p><em>Note</em>: This custom build system was used on personal hobby projects, where I thought it made sense. In a team of enough people, the fact that some solution is an industry standard makes it more relevant due to being known (to some extent) by all the team. I may find it intresting to design a custom writing system if there were no other humans to read it, but since there are other humans to communicate with then the standard writing system shared by everyone has more value.</p>
<h1 id="where-is-it-used">Where is it used?</h1>
<p>There is no standalone version of this build system, it was copy-pasted in new projects and tweaked accordingly.</p>
<ul>
<li><a href="https://github.com/anima-libera/qwy2/tree/6be3c50bba2e2fcde6e47e67a4b8273bd836b2ce/buildsystem">Here</a> it is used in <a href="http://localhost:1313/posts/qwy2/">Qwy2</a> (C++ project), one can see the use of code generation triggered by the special declarations in <a href="https://github.com/anima-libera/qwy2/blob/6be3c50bba2e2fcde6e47e67a4b8273bd836b2ce/src/embedded.hpp">this special header</a> to embed some ressources in the binary.</li>
</ul>
<p>The other projects it was used in did not make it to this portfolio due to not being presentable enough due to being abandoned too soon.</p>
<ul>
<li><a href="https://github.com/anima-libera/WhyCrystals-abandoned-2/tree/13c518f35dc117efe8e8cde31050be757cac7a6a/buildsystem">Here</a> it is used in an abandoned C project that I happened to have posted on GitHub, with the code generation for ressource embedding being triggered by <a href="https://github.com/anima-libera/WhyCrystals-abandoned-2/blob/13c518f35dc117efe8e8cde31050be757cac7a6a/src/embedded.h">this special header</a>.</li>
</ul>]]></description>
      
    </item>
    
    
  </channel>
</rss>
